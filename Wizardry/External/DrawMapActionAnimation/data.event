ALIGN 4
#define INSTALL_BONUS_ANIMATIONS // Uncomment for additional animations 
#define VRAM_Address 0x6013300 // Where in VRAM (see No$Gba Obj window) to draw animation 
#define MinimumFrames 28 // Vanilla does 28 frames 
#define BATTLE_MAPANIMATION_NUMBERS_FLAG 0xEE


PUSH // Only vanilla address that we take over. 
ORG $81274 // Poin to the vanilla proc	//{U}
//ORG $835B4 // Poin to the vanilla proc	//{J}
POIN gProc_MapAnimRound_Animation
POP 

// Vanilla's default is 28 frames here. 
ALIGN 4
MinimumFramesLink:
WORD MinimumFrames 

ALIGN 4
VRAM_Address_Link:
WORD VRAM_Address 

ALIGN 4
BATTLE_MAPANIMATION_NUMBERS_FLAGLink:
WORD BATTLE_MAPANIMATION_NUMBERS_FLAG


#ifndef SilverSword 
	#define SilverSword 4 
#endif 


#define AnimTable_Entry(ID, SpecificAnimationTable) "PUSH; ORG AnimTable2 + (ID*8); POIN SpecificAnimationTable; SHORT 0 0; POP"

#define FillWithZeroes "WORD 0 0 0 0 0 0 0 0" // 4 entries 
#define FillTwentyEntries "FillWithZeroes; FillWithZeroes; FillWithZeroes; FillWithZeroes; FillWithZeroes"



ALIGN 4
AnimTable2:
WORD 0 0 // 0th animation is blank 
FillTwentyEntries 


#ifndef PROC_YIELD
	#define PROC_YIELD "PROC_SLEEP(0)"
#endif 


ALIGN 4
DrawSpriteProc:							//HINT=PROCS
PROC_YIELD 
PROC_SET_NAME(ASMC_DrawProcName)
PROC_CALL_ROUTINE(Draw_Camera)
PROC_CALL_ROUTINE(Draw_StoreToBuffer)
PROC_LOOP_ROUTINE(Draw_PushToOam)
PROC_CALL_ROUTINE(Draw_Cleanup) 
PROC_END

ASMC_DrawProcName:
String("PausesStuffWhileAnimationIsGoing") ; BYTE 0
ALIGN 4


// gProc_MapAnimDefaultRound at 9A4764
// Copied the vanilla proc with our own routine added 
ALIGN 4
gProc_MapAnimRound_Animation:			//HINT=PROCS
PROC_YIELD 
PROC_SET_NAME(gProc_MapAnimRound_AnimationName)
PROC_CALL_ROUTINE($80813F9) // Begin Rounds Animation	//{U}
//PROC_CALL_ROUTINE($8083739) // Begin Rounds Animation	//{J}
PROC_CALL_ROUTINE($80814D5) // Move towards target	//{U}
//PROC_CALL_ROUTINE($8083815) // Move towards target	//{J}
PROC_SLEEP(1)
PROC_CALL_ROUTINE($80814D5)		//{U}
//PROC_CALL_ROUTINE($08083815)	//{J}
PROC_SLEEP(1)
PROC_CALL_ROUTINE($80814D5)		//{U}
//PROC_CALL_ROUTINE($08083815)	//{J}
PROC_SLEEP(1)
PROC_CALL_ROUTINE($80814D5)		//{U}
//PROC_CALL_ROUTINE($08083815)	//{J}
PROC_SLEEP(1)

PROC_CALL_ROUTINE($80815C1) // Camera Onto Target	//{U}
//PROC_CALL_ROUTINE($8083901) // Camera Onto Target	//{J}
PROC_SLEEP(2)
PROC_CALL_ROUTINE($808161D) // Specific vanilla animations	{U}
//PROC_CALL_ROUTINE($0808395D) // Specific vanilla animations	{J}

PROC_CALL_ROUTINE(Draw_SetupMemorySlots)

PROC_NEW_CHILD(DrawSpriteProc)
PROC_YIELD
//PROC_LOOP_ROUTINE($8081915) // Wait for HP to end changing	//{U}
////PROC_LOOP_ROUTINE($8083C55) // Wait for HP to end changing	//{J}
PROC_CALL_ROUTINE($8081535) // Move away	{U}
//PROC_CALL_ROUTINE($8083875) // Move away	{J}
PROC_SLEEP(1)
PROC_CALL_ROUTINE($8081535) // Move away	{U}
//PROC_CALL_ROUTINE($8083875) // Move away	{J}
PROC_SLEEP(1)
PROC_CALL_ROUTINE($8081535) // Move away	{U}
//PROC_CALL_ROUTINE($8083875) // Move away	{J}
PROC_SLEEP(1)
PROC_CALL_ROUTINE($8081535) // Move away	{U}
//PROC_CALL_ROUTINE($8083875) // Move away	{J}
PROC_LOOP_ROUTINE(Draw_WaitXFrames)
PROC_CALL_ROUTINE(Draw_RoundCleanup)	//cleaup palette
PROC_END


gProc_MapAnimRound_AnimationName:
String("gProc_MapAnimRound_Animation_Repointed") ; BYTE 0
ALIGN 4


/*
BYTE Confusion FreezeAnimID
BYTE SandAttack Splash1AnimID
BYTE Magnitude Splash2AnimID
//BYTE Tackle Empty_AnimID
BYTE TakeDown Break1AnimID
BYTE Tackle Break2AnimID
BYTE SeismicToss CircleAnimID
BYTE Swift Hit1AnimID
BYTE QuickAttack Hit2AnimID
BYTE Gust Shards1AnimID
BYTE PoisonPowder Shards2AnimID
BYTE Growl FlashAnimID
BYTE Leer FlashAnimID 
BYTE VineWhip ThinSlashAnimID
*/

//This line should occur before this #include: #define INSTALL_BONUS_ANIMATIONS (if installing them)
#include "MapAnimations/Installer.event" 

ALIGN 4
SaveScreenNumbers:
#incbin "MapAnimations/dmp/NumbersFromSaveScreen.dmp"	//HINT=BIN

ALIGN 4
SaveScreenNumbersPal:
#incbin "MapAnimations/dmp/NumbersFromSaveScreen_pal.dmp" // same thing but only 32 bytes instead of 512 from png2dmp		//HINT=BIN



#define Empty_AnimID 0 
#define Break1AnimID 1
#define Break2AnimID 2
#define CircleAnimID 3
#define Hit1AnimID 4
#define Hit2AnimID 5
#define Impact1AnimID 6
#define Impact2AnimID 7
#define Shards1AnimID 8
#define Shards2AnimID 9
#define Splash1AnimID 10
#define Splash2AnimID 11
#define ThinSlashAnimID 12 
#define ThickSlashAnimID 13
#define FlashAnimID 14 
#define FreezeAnimID 15 
#define FeatherAnimID 16
#define CauterizeAnimID 17
#define NumberOfAnimIDs 17

ALIGN 4
WeaponTypeAnimations:
BYTE 0 ThinSlashAnimID // Sword 
BYTE 1 Hit1AnimID // Lance 
BYTE 2 Shards2AnimID // Axe 
BYTE 3 Break1AnimID // Bow  
BYTE 5 Splash2AnimID // Anima 
BYTE 6 FlashAnimID // Light 
BYTE 7 Impact1AnimID // Dark 
BYTE $B Shards1AnimID // Monster 
BYTE $11 Shards1AnimID // Dragonstone 
SHORT 0xFFFF // Terminator 




ALIGN 4
SpecificWeaponAnimations:
BYTE SilverSword Shards1AnimID // Silver sword will always use the Shards1 animation 
SHORT 0xFFFF // Terminator 





// Animation IDs are defined above 
// Animations and Palettes are included in "MapAnimations/Installer.event"

AnimTable_Entry(ThinSlashAnimID,Slashing_A_Anim)
AnimTable_Entry(Hit1AnimID,Hit1_Small_Anim)
AnimTable_Entry(Shards2AnimID,Shards2_Small_Anim)
AnimTable_Entry(Break1AnimID,Break1_Small_Anim)
AnimTable_Entry(Splash2AnimID,Splash2_Small_Anim)
AnimTable_Entry(FlashAnimID,Flash_Anim)
AnimTable_Entry(Impact1AnimID,Impact1_Small_Anim)
AnimTable_Entry(Shards1AnimID,Shards1_Small_Anim)
#ifdef INSTALL_BONUS_ANIMATIONS 
AnimTable_Entry(Hit2AnimID,Hit2_Small_Anim)
AnimTable_Entry(Break2AnimID,Break2_Small_Anim)
AnimTable_Entry(CircleAnimID,Circle_Small_Anim)
AnimTable_Entry(CauterizeAnimID,Cauterize_Anim) // small hit 2 was here 
AnimTable_Entry(Impact2AnimID,Impact2_Small_Anim)
AnimTable_Entry(Splash1AnimID,Splash1_Small_Anim)
AnimTable_Entry(ThickSlashAnimID,Slashing_B_Anim) // same palete as Slashing_A
AnimTable_Entry(FreezeAnimID,Freeze_Anim)
AnimTable_Entry(FeatherAnimID,Feather_Anim)
#endif
